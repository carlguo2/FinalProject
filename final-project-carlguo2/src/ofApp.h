#pragma once
#include <string.h>
#include <vector>

#include "ofMain.h"
#include "Bullet.h"  // added game components in
#include "Enemy.h"
#include "LevelController.h"
#include "Player.h"
#include "PlayerLife.h"

// Enum to represent the current state of the game
enum GameState {
	START = 0,
	IN_GAME,
	END
};

class ofApp : public ofBaseApp {
private:
	GameState current_state_ = START;
	int score_;

	// player properties in game
	Player player_;
	ofImage player_img_;

	// bullet properties in game
	std::vector<Bullet> bullets_;
	ofImage player_bullet_img_;
	ofImage enemy_bullet_img_;

	// enemy properties
	std::vector<Enemy> enemies_;
	ofImage enemy_img_;
	float max_enemy_amplitude_;
	float max_enemy_shoot_interval_;

	// LevelController 
	LevelController level_controller_;

public:
	// autogenerated methods from openFrameworks
	void setup();
	void update();
	void draw();

	void keyPressed(int key);
	void keyReleased(int key);
	void mouseMoved(int x, int y);
	void mouseDragged(int x, int y, int button);
	void mousePressed(int x, int y, int button);
	void mouseReleased(int x, int y, int button);
	void mouseEntered(int x, int y);
	void mouseExited(int x, int y);
	void windowResized(int w, int h);
	void dragEvent(ofDragInfo dragInfo);
	void gotMessage(ofMessage msg);

	//own methods
	void update_bullets_vector();
	void check_hit_enemy();
	void check_hit_player();
	void create_new_enemy();
	void create_enemy_bullet(Enemy e);
	void create_player_bullet();
	void reset();
};
