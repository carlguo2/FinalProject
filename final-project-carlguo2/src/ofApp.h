#pragma once
#include <string>
#include <vector>

#include "ofMain.h"
#include "Bullet.h"  // added game components in
#include "Enemy.h"
#include "LevelController.h"
#include "Player.h"
#include "ExtraLife.h"

// Enum to represent the current state of the game
enum GameState {
	START = 0,
	IN_GAME,
	PAUSED,
	END
};

class ofApp : public ofBaseApp {
private:
	// start screen
	ofImage game_screen_img_;

	// font type
	ofTrueTypeFont game_font_;
	ofTrueTypeFont small_game_font_;

	// high score vector
	std::vector<int> high_score_;
	// makes sure the high_score_ array doesn't get looped when pushing back
	bool score_flag_ = true;  

	GameState current_state_ = START;
	int score_;

	// player properties in game
	Player player_;
	ofImage player_img_;

	// bullet properties in game
	std::vector<Bullet> bullets_;
	ofImage player_bullet_img_;
	ofImage enemy_bullet_img_;

	// enemy properties
	std::vector<Enemy> enemies_;
	ofImage enemy_img_;
	float max_enemy_shoot_interval_;

	// LevelController 
	LevelController level_controller_;

	// power ups 
	std::vector<ExtraLife> extra_lives_;
	ofImage life_img;

	// private helper function for helper methods
	std::string getHighScoreStr();
	void addScoreToHighScore(int new_score);
public:
	// autogenerated methods from openFrameworks
	void setup();
	void update();
	void draw();

	void keyPressed(int key);
	void keyReleased(int key);
	void mousePressed(int x, int y, int button);

	//own methods
	void draw_game_start();
	void draw_in_game();
	void draw_game_paused();
	void draw_game_end();

	void check_hit_enemy();
	void check_hit_player();

	void create_new_enemy();
	void create_enemy_bullet(Enemy e);
	void create_player_bullet();

	void update_bullets_vector();
	void update_power_ups();

	void reset();
};
